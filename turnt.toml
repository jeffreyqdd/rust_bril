[envs.transform]
command = "cargo run --release --quiet -- -f {filename} --transform-print | brilirs"

[envs.baseline]
command = "brili2json < {filename} | brilirs"
result = "-"

[envs.optimize]
command = "cargo run -- -O < {filename} | brilirs"
result = "-"

# For parsing tests, compare converting from bril to json and back with no optimizations results 
# in the same program as bril2txt 
[envs.parse]
command = "cargo run --release --quiet -- -f {filename} | bril2txt"

[envs.parse_baseline]
command = "bril2json < {filename} | bril2txt"

# For dce & lvn tests, compare result of optimizing to running brilirs on the unoptimized code
[envs.dce_lvn]
command = "cargo run --release --quiet -- -f {filename} --local | brilirs"

[envs.dce_lvn_baseline]
command = "bril2json < {filename} | brilirs"

# For comprehensive sanity check, compare the result of parsing and running all the benchmarks
# inside the benchmark directory and ensure that the results are the same among our parsed
# version and the accepted bril interpreter on the original file
[envs.bench_baseline]
command = "bril2json < {filename} | brilirs $(awk '/^# ARGS:/ {{for (i=3; i<=NF; i++) print $i}}' {filename})"

[envs.bench_baseline_profile]
command = "bril2json < {filename} | brilirs --profile $(awk '/^# ARGS:/ {{for (i=3; i<=NF; i++) print $i}}' {filename})"
output.baseline_prof = "2"

[envs.bench_check]
command = "./target/release/rust_bril -f {filename} | brilirs $(awk '/^# ARGS:/ {{for (i=3; i<=NF; i++) print $i}}' {filename})"

[envs.bench_local]
command = "./target/release/rust_bril --local -f {filename} | brilirs $(awk '/^# ARGS:/ {{for (i=3; i<=NF; i++) print $i}}' {filename})"

[envs.bench_local_profile]
command = "./target/release/rust_bril --local -f {filename} | brilirs --profile $(awk '/^# ARGS:/ {{for (i=3; i<=NF; i++) print $i}}' {filename})"
output.prof = "2"

[envs.dataflow_initialized_variables]
command = "cargo run --release --quiet -- -f {filename} --dataflow initialized-variables"
output.initialized_variables_out = "-"

[envs.dataflow_live_variables]
command = "cargo run --release --quiet -- -f {filename} --dataflow live-variables"
output.live_variables_out = "-"
